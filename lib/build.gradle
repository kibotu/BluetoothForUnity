apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'android-apt'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.2'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName '1.0'

        buildConfigField 'String', 'SIMPLE_VERSION_NAME', escape(simpleReleaseVersionName())
        buildConfigField 'String', 'CANONICAL_VERSION_NAME', escape(canonicalReleaseVersionName())
        buildConfigField 'String', 'COMMIT_HASH', escape(commitHash())
        buildConfigField 'String', 'BRANCH', escape(branchNameByGit())
        buildConfigField 'String', 'BUILD_DATE', escape(new Date().getTime())

        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            debuggable false
            minifyEnabled false
            shrinkResources = false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFile 'proguard-net.kibotu.pro'
            proguardFile 'proguard-retrolambda.pro'
            proguardFile 'proguard-google-support.pro'
            proguardFile 'proguard-rx.pro'
        }
    }

    dexOptions {
        preDexLibraries = false
        jumboMode = false
        javaMaxHeapSize "2g"
        maxProcessCount 4
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

        //enable incremental compilation
        incremental = true
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false        // true by default
        checkAllWarnings false
        checkReleaseBuilds false
        ignoreWarnings true       // false by default
        quiet true                // false by default
    }

    packagingOptions {
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/services/javax.annotation.processing.Processor'  // butterknife
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    testOptions {
        unitTests.all {
            jvmArgs '-noverify'
        }
        unitTests.returnDefaultValues = true
    }

    // region kotlin

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    kapt {
        generateStubs = true
    }

    // endregion
}

// region dependencies

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'

    // network
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.squareup.retrofit2:retrofit-mock:2.1.0'
    compile 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    compile 'com.squareup.okhttp3:okhttp:3.4.1'

    // rx
    compile 'io.reactivex:rxandroid:1.2.1'

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    retrolambdaConfig 'net.orfjackal.retrolambda:retrolambda:2.3.0'
}

// endregion

// region retrolambda

retrolambda {
    jvmArgs '-noverify'
    defaultMethods false
    incremental true
}

// endregion

// region javadoc

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'

    // NEW LINE HERE !!!
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// endregion

// region dexcount

dexcount {
    format = "list"
    includeClasses = false
    includeFieldCount = true
    includeTotalMethodCount = false
    orderByMethodCount = false
    verbose = true
    maxTreeDepth = Integer.MAX_VALUE
    teamCityIntegration = false
    enableForInstantRun = false
    teamCitySlug = null
}

// endregion

// region settings

// https://github.com/android/platform_packages_apps_settings/blob/master/AndroidManifest.xml
//noinspection GroovyAssignabilityCheck
task settings() {
    doLast {
        description = "adb shell am start -a android.settings.SETTINGS"
        println(description)
        final def stdout = new ByteArrayOutputStream()
        exec {
            executable android.getAdbExe().toString()
            args = ['shell', 'am', 'start', '-a', 'android.settings.SETTINGS']
            standardOutput = stdout;
        }
        final def result = stdout.toString().trim();

        println(result)
    }
}

//noinspection GroovyAssignabilityCheck
task devSettings() {
    doLast {
        description = "adb shell am start -n com.android.settings/.DevelopmentSettings"
        println(description)
        final def stdout = new ByteArrayOutputStream()
        exec {
            executable android.getAdbExe().toString()
            args = ['shell', 'am', 'start', '-n', 'com.android.settings/.DevelopmentSettings']
            standardOutput = stdout;
        }
        final def result = stdout.toString().trim();
        println(result)
    }
}

// endregion

// region versioning

//noinspection GroovyAssignabilityCheck
task printCommitCount() {
    doLast { commitCount() }
}

//noinspection GroovyAssignabilityCheck
task printBranchname() {
    doLast { branchName() }
}

//noinspection GroovyAssignabilityCheck
task printGitLog() {
    doLast { gitLog() }
}

def gitLog() {
    description = "git log --pretty=format:\"%h %s\""
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', "--pretty=format:\"%h %s\""
        standardOutput = stdout
    }

    return stdout.toString().trim();
}

def commitHash() {
    description = "git log -n 1 --format='%h'"
    println(description)
    final def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'log', '-n', '1', "--format='%h'"
        standardOutput = stdout
    }
    println("Git Hash" + stdout.toString())
    return stdout.toString().trim().replaceAll('\'', '')
}

def commitCount() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-list --full-history --all"
    println(description)
    exec {
        commandLine 'git', 'rev-list', '--full-history', '--all'
        standardOutput = stdout
    }
    final String output = stdout.toString();
    final List<String> commits = output.split("\n");
    println("Version Code: " + commits.size())
    return commits.size();
}

def simpleReleaseVersionName() {
    description = "Creating release version name. Format: major.minor.build"
    println(description)

    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()
    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (releaseName.contains("release"))
        releaseName = releaseName.replace("release/", "");

    if (buildNumber != null)
        releaseName += "." + buildNumber
    else
        releaseName += "." + 0

    println("Version Name: " + releaseName)
    return releaseName
}

def canonicalReleaseVersionName() {
    description = "Creating release version name. Format: branch/major.minor.build-commithash"
    println(description)
    final def buildNumber = buildNumberByCI()
    def releaseName = branchName()

    // remove 'origin' in from branch name
    if (releaseName != null && releaseName.contains("origin/"))
        releaseName = releaseName.replace("origin/", "");

    if (!releaseName.contains("release"))
        releaseName += "/0.0"

    if (buildNumber != null) {
        releaseName += "." + buildNumber + "-"
    } else {
        releaseName += ".0-"
    }

    releaseName += commitHash()
    println("Version Name: " + releaseName)
    return releaseName
}

def buildNumberByCI() {
    description = "Getting build number from Jenkins or Travis."
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_BUILD_NUMBER != null)
        return Integer.parseInt(env.BITRISE_BUILD_NUMBER)
    if (env.BUILD_NUMBER != null)
        return Integer.parseInt(env.BUILD_NUMBER)
    if (env.TRAVIS_BUILD_NUMBER != null)
        return Integer.parseInt(env.TRAVIS_BUILD_NUMBER)
    return 0;
}

def branchName() {
    description = "Getting branch name from Jenkins or Travis or from git directly."
    println(description)
    def branchName = branchNameByCI()
    if (branchName == null)
        branchName = branchNameByGit()
    return branchName;
}

def branchNameByCI() {
    description = "Getting build number from Jenkins or Travis."
    println(description)
    final def env = System.getenv()
    if (env.BITRISE_GIT_BRANCH != null)
        return env.BITRISE_GIT_BRANCH;
    if (env.GIT_BRANCH != null)
        return env.GIT_BRANCH
    if (env.TRAVIS_BRANCH != null)
        return env.TRAVIS_BRANCH
    return null
}

def branchNameByGit() {
    final def stdout = new ByteArrayOutputStream()
    description = "git rev-parse --abbrev-ref HEAD"
    println(description)
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    final String output = stdout.toString().trim();
    println("Branch Name: " + output)
    return output;
}

// endregion

// region misc

def escape(Object value) {
    return "\"" + value + "\""
}

// endregion